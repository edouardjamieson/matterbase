// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum EntryStatus {
    DRAFT
    LIVE
    TRASHED
}

enum TemplateMode {
    SINGLE
    COLLECTION
}

// CMS entry (ex: a post or a page)
model Entry {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    title  String
    status EntryStatus
    lang   String

    template   Template @relation(fields: [templateId], references: [id])
    templateId String

    meta String @db.Text
}

// CMS Fields template (ex: fields for article)
model Template {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    title String
    icon  String
    mode  TemplateMode

    entries Entry[]

    cms   Cms    @relation(fields: [cmsId], references: [id])
    cmsId String
}

// Collection of templates and entries
model Cms {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById String

    title String
    image String

    templates Template[]
    users     User[]
}

model User {
    id    String  @id @default(cuid())
    name  String?
    email String? @unique
    emailVerified DateTime?
    image String?

    accounts  Account[]
    sessions  Session[]
    entries   Entry[]
    templates Template[]
    cms       Cms[]
}

// ===================================
// Next auth stuff
// ===================================

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
